"use strict";

var cov_4ci7ovqmu = function () {
  var path = "/Users/blm/Development/RCL/uw-tsv-parser/src/core/uw-tsv-parser.js";
  var hash = "dd7e2320ffa7ae5e3781c4333f9af9a9329d0f97";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/blm/Development/RCL/uw-tsv-parser/src/core/uw-tsv-parser.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "1": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 12,
          column: 46
        }
      },
      "2": {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "3": {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 14,
          column: 46
        }
      },
      "4": {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 15,
          column: 47
        }
      },
      "5": {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 16,
          column: 18
        }
      },
      "6": {
        start: {
          line: 20,
          column: 17
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "7": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "8": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 24,
          column: 45
        }
      },
      "9": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "10": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "11": {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 27,
          column: 18
        }
      },
      "12": {
        start: {
          line: 45,
          column: 13
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "13": {
        start: {
          line: 46,
          column: 15
        },
        end: {
          line: 46,
          column: 17
        }
      },
      "14": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 49,
          column: 60
        }
      },
      "15": {
        start: {
          line: 49,
          column: 48
        },
        end: {
          line: 49,
          column: 59
        }
      },
      "16": {
        start: {
          line: 50,
          column: 34
        },
        end: {
          line: 50,
          column: 58
        }
      },
      "17": {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 70,
          column: 3
        }
      },
      "18": {
        start: {
          line: 51,
          column: 13
        },
        end: {
          line: 51,
          column: 14
        }
      },
      "19": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "20": {
        start: {
          line: 53,
          column: 21
        },
        end: {
          line: 53,
          column: 22
        }
      },
      "21": {
        start: {
          line: 54,
          column: 22
        },
        end: {
          line: 54,
          column: 46
        }
      },
      "22": {
        start: {
          line: 55,
          column: 21
        },
        end: {
          line: 55,
          column: 23
        }
      },
      "23": {
        start: {
          line: 56,
          column: 6
        },
        end: {
          line: 56,
          column: 43
        }
      },
      "24": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "25": {
        start: {
          line: 58,
          column: 15
        },
        end: {
          line: 58,
          column: 16
        }
      },
      "26": {
        start: {
          line: 59,
          column: 6
        },
        end: {
          line: 67,
          column: 7
        }
      },
      "27": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 60
        }
      },
      "28": {
        start: {
          line: 62,
          column: 23
        },
        end: {
          line: 62,
          column: 24
        }
      },
      "29": {
        start: {
          line: 63,
          column: 24
        },
        end: {
          line: 63,
          column: 25
        }
      },
      "30": {
        start: {
          line: 64,
          column: 23
        },
        end: {
          line: 64,
          column: 24
        }
      },
      "31": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 45
        }
      },
      "32": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 48
        }
      },
      "33": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 48
        }
      },
      "34": {
        start: {
          line: 73,
          column: 2
        },
        end: {
          line: 73,
          column: 19
        }
      },
      "35": {
        start: {
          line: 91,
          column: 15
        },
        end: {
          line: 91,
          column: 86
        }
      },
      "36": {
        start: {
          line: 92,
          column: 32
        },
        end: {
          line: 92,
          column: 34
        }
      },
      "37": {
        start: {
          line: 93,
          column: 15
        },
        end: {
          line: 93,
          column: 17
        }
      },
      "38": {
        start: {
          line: 94,
          column: 15
        },
        end: {
          line: 94,
          column: 17
        }
      },
      "39": {
        start: {
          line: 95,
          column: 14
        },
        end: {
          line: 95,
          column: 16
        }
      },
      "40": {
        start: {
          line: 96,
          column: 2
        },
        end: {
          line: 122,
          column: 3
        }
      },
      "41": {
        start: {
          line: 96,
          column: 13
        },
        end: {
          line: 96,
          column: 14
        }
      },
      "42": {
        start: {
          line: 97,
          column: 18
        },
        end: {
          line: 97,
          column: 37
        }
      },
      "43": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "44": {
        start: {
          line: 100,
          column: 6
        },
        end: {
          line: 100,
          column: 47
        }
      },
      "45": {
        start: {
          line: 101,
          column: 6
        },
        end: {
          line: 101,
          column: 23
        }
      },
      "46": {
        start: {
          line: 102,
          column: 6
        },
        end: {
          line: 102,
          column: 15
        }
      },
      "47": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "48": {
        start: {
          line: 109,
          column: 18
        },
        end: {
          line: 109,
          column: 20
        }
      },
      "49": {
        start: {
          line: 110,
          column: 6
        },
        end: {
          line: 110,
          column: 20
        }
      },
      "50": {
        start: {
          line: 111,
          column: 6
        },
        end: {
          line: 111,
          column: 33
        }
      },
      "51": {
        start: {
          line: 112,
          column: 6
        },
        end: {
          line: 112,
          column: 25
        }
      },
      "52": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "53": {
        start: {
          line: 116,
          column: 15
        },
        end: {
          line: 116,
          column: 16
        }
      },
      "54": {
        start: {
          line: 117,
          column: 6
        },
        end: {
          line: 117,
          column: 38
        }
      },
      "55": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 121,
          column: 24
        }
      },
      "56": {
        start: {
          line: 123,
          column: 22
        },
        end: {
          line: 123,
          column: 67
        }
      },
      "57": {
        start: {
          line: 124,
          column: 2
        },
        end: {
          line: 124,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "decode",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 15
          }
        },
        loc: {
          start: {
            line: 10,
            column: 32
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "encode",
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 15
          }
        },
        loc: {
          start: {
            line: 19,
            column: 32
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 19
      },
      "2": {
        name: "tableToTsvString",
        decl: {
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 44,
            column: 32
          }
        },
        loc: {
          start: {
            line: 44,
            column: 48
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 44
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 49,
            column: 41
          },
          end: {
            line: 49,
            column: 42
          }
        },
        loc: {
          start: {
            line: 49,
            column: 48
          },
          end: {
            line: 49,
            column: 59
          }
        },
        line: 49
      },
      "4": {
        name: "tsvStringToTable",
        decl: {
          start: {
            line: 86,
            column: 16
          },
          end: {
            line: 86,
            column: 32
          }
        },
        loc: {
          start: {
            line: 86,
            column: 42
          },
          end: {
            line: 125,
            column: 1
          }
        },
        line: 86
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }, {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }],
        line: 52
      },
      "1": {
        loc: {
          start: {
            line: 59,
            column: 6
          },
          end: {
            line: 67,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 6
          },
          end: {
            line: 67,
            column: 7
          }
        }, {
          start: {
            line: 59,
            column: 6
          },
          end: {
            line: 67,
            column: 7
          }
        }],
        line: 59
      },
      "2": {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        }, {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        }],
        line: 98
      },
      "3": {
        loc: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }],
        line: 107
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "dd7e2320ffa7ae5e3781c4333f9af9a9329d0f97"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tableToTsvString = tableToTsvString;
exports.tsvStringToTable = tsvStringToTable;

/* Lossless Conversions are:
   \n for newline,
   \t for tab,
   \r for carriage return,
   \\ for backslash.
*/
function decode(incomingString) {
  cov_4ci7ovqmu.f[0]++;
  var newValue = (cov_4ci7ovqmu.s[0]++, incomingString);
  cov_4ci7ovqmu.s[1]++;
  newValue = newValue.replaceAll("\\n", '\n');
  cov_4ci7ovqmu.s[2]++;
  newValue = newValue.replaceAll("\\t", '\t');
  cov_4ci7ovqmu.s[3]++;
  newValue = newValue.replaceAll("\\r", '\r');
  cov_4ci7ovqmu.s[4]++;
  newValue = newValue.replaceAll("\\\\", '\\');
  cov_4ci7ovqmu.s[5]++;
  return newValue;
}

function encode(incomingString) {
  cov_4ci7ovqmu.f[1]++;
  var newValue = (cov_4ci7ovqmu.s[6]++, incomingString); // process any backslash encoding first
  // otherwise it will find backslashes of the other encodings.

  cov_4ci7ovqmu.s[7]++;
  newValue = newValue.replaceAll('\\', "\\\\");
  cov_4ci7ovqmu.s[8]++;
  newValue = newValue.replaceAll('\n', "\\n");
  cov_4ci7ovqmu.s[9]++;
  newValue = newValue.replaceAll('\t', "\\t");
  cov_4ci7ovqmu.s[10]++;
  newValue = newValue.replaceAll('\r', "\\r");
  cov_4ci7ovqmu.s[11]++;
  return newValue;
}
/*
Returns: 
`{data: dvalue, errors: evalue}`
where dvalue is a string and errors is an array of integer triplets, where:
	- the first integer is the row number
	- the second integer is the actual number of columns 
    when it does not match the number in the header, 
    which is the expected number; 
    if the number of columns do match the value will be zero.
	- the third integer is the column number (zero based) 
    in the row where the value is not a string;
    if this is not the error on the row, then the value will be -1;
*/


function tableToTsvString(incomingTable) {
  cov_4ci7ovqmu.f[2]++;
  var data = (cov_4ci7ovqmu.s[12]++, "");
  var errors = (cov_4ci7ovqmu.s[13]++, []); // copy array in case incoming is deep frozen or a const
  // deep copy: var newArray = currentArray.map(arr => arr.slice());

  var _incomingTable = (cov_4ci7ovqmu.s[14]++, incomingTable.map(function (row) {
    cov_4ci7ovqmu.f[3]++;
    cov_4ci7ovqmu.s[15]++;
    return row.slice();
  }));

  var expectedNumberOfColumns = (cov_4ci7ovqmu.s[16]++, _incomingTable[0].length);
  cov_4ci7ovqmu.s[17]++;

  for (var i = (cov_4ci7ovqmu.s[18]++, 0); i < _incomingTable.length; i++) {
    cov_4ci7ovqmu.s[19]++;

    if (_incomingTable[i].length !== expectedNumberOfColumns) {
      cov_4ci7ovqmu.b[0][0]++;
      var rownum = (cov_4ci7ovqmu.s[20]++, i);
      var numcols = (cov_4ci7ovqmu.s[21]++, _incomingTable[i].length);
      var colnum = (cov_4ci7ovqmu.s[22]++, -1);
      cov_4ci7ovqmu.s[23]++;
      errors.push([rownum, numcols, colnum]);
    } else {
      cov_4ci7ovqmu.b[0][1]++;
    }

    cov_4ci7ovqmu.s[24]++;

    for (var j = (cov_4ci7ovqmu.s[25]++, 0); j < _incomingTable[i].length; j++) {
      cov_4ci7ovqmu.s[26]++;

      if (typeof _incomingTable[i][j] === 'string') {
        cov_4ci7ovqmu.b[1][0]++;
        cov_4ci7ovqmu.s[27]++;
        _incomingTable[i][j] = encode(_incomingTable[i][j]);
      } else {
        cov_4ci7ovqmu.b[1][1]++;

        var _rownum = (cov_4ci7ovqmu.s[28]++, i);

        var _numcols = (cov_4ci7ovqmu.s[29]++, 0);

        var _colnum = (cov_4ci7ovqmu.s[30]++, j);

        cov_4ci7ovqmu.s[31]++;
        errors.push([_rownum, _numcols, _colnum]); // leave data as-is, do not encode
      }
    }

    cov_4ci7ovqmu.s[32]++;
    data += _incomingTable[i].join('\t') + '\n';
  }

  var tsvObject = (cov_4ci7ovqmu.s[33]++, {
    data: data,
    errors: errors
  });
  cov_4ci7ovqmu.s[34]++;
  return tsvObject;
}
/*
Returns: 
`{header: hvalue, data: dvalue, errors: evalue}`
where:
- header: is the header row
- data: is the data rows
- errors is a list of errors, which are pairs of integers:
  - the first integer is the row number
  - the second integer is the actual number of columns found
*/


function tsvStringToTable(content) {
  cov_4ci7ovqmu.f[4]++;
  // remove leading whithespace
  // remove trailing newlines if present
  // remove any CR characters
  // then split on new line
  var rows = (cov_4ci7ovqmu.s[35]++, content.trimStart().replace(/\n+$/, '').replaceAll('\r', '').split('\n'));
  var expectedNumberOfColumns = (cov_4ci7ovqmu.s[36]++, -1);
  var errors = (cov_4ci7ovqmu.s[37]++, []);
  var header = (cov_4ci7ovqmu.s[38]++, []);
  var table = (cov_4ci7ovqmu.s[39]++, []);
  cov_4ci7ovqmu.s[40]++;

  for (var i = (cov_4ci7ovqmu.s[41]++, 0); i < rows.length; i++) {
    var columns = (cov_4ci7ovqmu.s[42]++, rows[i].split('\t'));
    cov_4ci7ovqmu.s[43]++;

    if (i === 0) {
      cov_4ci7ovqmu.b[2][0]++;
      cov_4ci7ovqmu.s[44]++;
      // record the number of columns
      expectedNumberOfColumns = columns.length;
      cov_4ci7ovqmu.s[45]++;
      header = columns;
      cov_4ci7ovqmu.s[46]++;
      continue; // the header receives no further processing
    } else {
      cov_4ci7ovqmu.b[2][1]++;
    } // validate number of columns


    cov_4ci7ovqmu.s[47]++;

    if (columns.length !== expectedNumberOfColumns) {
      cov_4ci7ovqmu.b[3][0]++;
      // first integer is row number; second is number of columns found
      var error = (cov_4ci7ovqmu.s[48]++, []);
      cov_4ci7ovqmu.s[49]++;
      error.push(i);
      cov_4ci7ovqmu.s[50]++;
      error.push(columns.length);
      cov_4ci7ovqmu.s[51]++;
      errors.push(error);
    } else {
      cov_4ci7ovqmu.b[3][1]++;
    } // process lossless conversions


    cov_4ci7ovqmu.s[52]++;

    for (var j = (cov_4ci7ovqmu.s[53]++, 0); j < columns.length; j++) {
      cov_4ci7ovqmu.s[54]++;
      columns[j] = decode(columns[j]);
    } // add to output table


    cov_4ci7ovqmu.s[55]++;
    table.push(columns);
  }

  var tableObject = (cov_4ci7ovqmu.s[56]++, {
    header: header,
    data: table,
    errors: errors
  });
  cov_4ci7ovqmu.s[57]++;
  return tableObject;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,