"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _pathExtra = _interopRequireDefault(require("path-extra"));

var _verseHelpers = require("./verseHelpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ManageResource {
  constructor(originalBiblePath, bookId) {
    this.resource = {};
    this.sourcePath = originalBiblePath;
    this.bookId = bookId;
    this.loadBook();
  }

  loadBook() {
    if (this.sourcePath && this.bookId) {
      const bookDir = _pathExtra.default.join(this.sourcePath, this.bookId);

      if (_fsExtra.default.existsSync(bookDir)) {
        const chapters = _fsExtra.default.readdirSync(bookDir).filter(filename => _pathExtra.default.extname(filename) === '.json');

        for (let index = 0; index < chapters.length; index++) {
          const chapterFilename = chapters[index];

          const chapterFilePath = _pathExtra.default.join(bookDir, chapterFilename);

          if (_fsExtra.default.existsSync(chapterFilePath)) {
            const chapter = chapterFilename.replace('.json', '');

            const chapterObject = _fsExtra.default.readJsonSync(chapterFilePath);

            this.resource[chapter] = chapterObject;
          } else {
            console.error(`${chapterFilePath}, path does not exist`);
          }
        }
      } else {
        console.error(`${bookDir}, path does not exist`);
      }
    } else {
      console.error(`bookId or originalBiblePath is undefined`);
    }
  }

  getResource() {
    return this.resource;
  }

  getVerseObjects(chapter, verse) {
    return this.resource[chapter][verse];
  }
  /**
   * find all verses in ref
   * @param {string} ref
   * @returns {string}
   */


  getVerseStringFromRef(ref) {
    const bookData = this.resource;
    const verseString = (0, _verseHelpers.getVerseString)(bookData, ref);

    if (!verseString) {
      // eslint-disable-next-line no-throw-literal
      throw `Reference not found: ${ref}`;
    }

    return verseString;
  }

}

var _default = ManageResource;
exports.default = _default;