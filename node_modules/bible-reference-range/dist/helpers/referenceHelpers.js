"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.characterizeReference = characterizeReference;
exports.cleanupReference = cleanupReference;
exports.convertReferenceChunksToString = convertReferenceChunksToString;
exports.getVerseList = getVerseList;
exports.getVerseSpanRange = getVerseSpanRange;
exports.getVerses = getVerses;
exports.isVerseInRange = isVerseInRange;
exports.isVerseList = isVerseList;
exports.isVerseSet = isVerseSet;
exports.isVerseSpan = isVerseSpan;
exports.parseReferenceToList = parseReferenceToList;
exports.toInt = toInt;
exports.toIntIfValid = toIntIfValid;

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// list of possible hyphen and dash characters used for range separator
var RANGE_SEPARATORS = ['-', // HYPHEN-MINUS
"\xAD", // SOFT HYPHEN
"\u2010", // HYPHEN
"\u2011", // NON-BREAKING HYPHEN
"\u2012", // FIGURE DASH
"\u2013", // EN DASH
"\u2014" // EM DASH
];
var ZERO_WIDTH_SPACE = "\u200B";
var NO_BREAK_SPACE = "\xA0";
var ZERO_WIDTH_NO_BREAK_SPACE = "\uFEFF";
/**
 * takes a reference and splits into individual verses or verse spans.
 * @param {string} ref - reference in format such as:
 *   “2:4-5”, “2:3a”, “2-3b-4a”, “2:7,12”, “7:11-8:2”, "6:15-16;7:2"
 * @return {verseChunk[]}  The Verse Chunk returned
 */

function parseReferenceToList(ref) {
  try {
    var verseChunks = [];
    var refChunks = ref.split(';');
    var lastChapter = 1;

    var _iterator = _createForOfIteratorHelper(refChunks),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var refChunk = _step.value;

        // 1:1-23,32 ; 1-3
        if (!refChunk) {
          continue;
        } // If no semicolon (no verses), reference is either a chapter, chapter range, or invalid


        if (!refChunk.includes(':')) {
          verseChunks = addChapterReference(verseChunks, refChunk);
          continue;
        }

        var verseParts = refChunk.split(','); // get the object from the first chunk before the comma

        var _getChapterVerse = getChapterVerse(verseParts[0]),
            chapter = _getChapterVerse.chapter,
            verse = _getChapterVerse.verse,
            foundChapterVerse = _getChapterVerse.foundChapterVerse;

        if (!foundChapterVerse) {
          chapter = verse;
          verse = null;
        }

        lastChapter = chapter;
        var range = getRange(verse);
        verseChunks.push(_objectSpread(_objectSpread({}, range), {}, {
          chapter: chapter
        }));

        if (range.endChapter) {
          lastChapter = range.endChapter;
        } // get the object from the rest of the chunks after the comma


        for (var i = 1; i < verseParts.length; i++) {
          var versePart = verseParts[i];

          if (!versePart) {
            continue;
          }

          var _getChapterVerse2 = getChapterVerse(versePart),
              chapter_ = _getChapterVerse2.chapter,
              verse_ = _getChapterVerse2.verse,
              _foundChapterVerse = _getChapterVerse2.foundChapterVerse;

          if (_foundChapterVerse) {
            chapter = chapter_;
            verse = verse_;
            lastChapter = chapter;
          } else {
            chapter = lastChapter;
            verse = verse_;
          }

          var _range = getRange(verse);

          if (_range.endVerse) {
            verseChunks.push(_objectSpread(_objectSpread({}, _range), {}, {
              chapter: chapter
            }));

            if (_range.endChapter) {
              lastChapter = _range.endChapter;
            }
          } else {
            // not range
            verseChunks.push({
              verse: _range.verse,
              chapter: chapter
            });
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return verseChunks;
  } catch (e) {
    console.warn("parseReferenceToList() - invalid ref: \"".concat(ref, "\""), e);
  }

  return null;
}
/**
 * @private 
 * If valid chapter reference, add chapter object to verse chunks list
 * 
 * @param {verseChunk[]} verseChunks - Array of verse chunks
 * @param {string} chapterRef - Chapter reference to add to verse chunks
 * @returns {verseChunks[]} - Array copy with new chapter reference if valid, or input array if not
 */


function addChapterReference(verseChunks, chapterRef) {
  var isRange = getRangeSeparator(chapterRef) >= 0;

  if (isRange) {
    var pos = getRangeSeparator(chapterRef);
    var foundRange = pos >= 0;

    if (foundRange) {
      var start = toIntIfValid(chapterRef.substring(0, pos));
      var end = toIntIfValid(chapterRef.substring(pos + 1));
      return [].concat(_toConsumableArray(verseChunks), [{
        chapter: start,
        endChapter: end
      }]);
    }
  } else {
    return [].concat(_toConsumableArray(verseChunks), [{
      chapter: toIntIfValid(chapterRef)
    }]);
  }

  return verseChunks;
}
/**
 * convert array of Reference chunks to reference string
 * @param {array} chunks
 * @return {string}
 */


function convertReferenceChunksToString(chunks) {
  var result = '';

  try {
    var lastChapter = null;
    var lastChunk = null;

    if (Array.isArray(chunks)) {
      var _iterator2 = _createForOfIteratorHelper(chunks),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var chunk = _step2.value;

          if (chunk.endChapter) {
            if (result) {
              result += ';';
            } // Check for chapter range without verses


            if (!chunk.verse) {
              result += "".concat(chunk.chapter, "-").concat(chunk.endChapter);
            } else {
              result += "".concat(chunk.chapter, ":").concat(chunk.verse, "-").concat(chunk.endChapter, ":").concat(chunk.endVerse);
            }

            lastChapter = chunk.endChapter;
          } else {
            if (lastChapter !== chunk.chapter || lastChunk && lastChunk.endChapter) {
              if (result) {
                result += ';';
              }

              result += "".concat(chunk.chapter) + (chunk.verse ? ':' : '');
              lastChapter = chunk.chapter;
            } else {
              // same chapter
              if (result) {
                result += ',';
              }
            } // check for solo chapter


            if (chunk.verse) {
              result += "".concat(chunk.verse);
            }

            if (chunk.endVerse) {
              if (chunk.endVerse === 'ff') {
                result += chunk.endVerse;
              } else {
                result += "-".concat(chunk.endVerse);
              }
            }
          }

          lastChunk = chunk;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (e) {
    console.warn("convertReferenceChunksToString() - invalid chunks: \"".concat(JSON.stringify(chunks), "\""));
  }

  return result;
}
/**
 * check to see if single reference
 * @param {array} chunks
 * @param {string} refStr
 * @return {{chapter, verse, verseStr}}
 */


function characterizeReference(chunks, refStr) {
  var results = {};

  if (chunks && chunks.length && refStr) {
    var multiverse = false;
    var verseStr = null;
    results.chapter = chunks[0].chapter;
    results.verse = chunks[0].verse;
    var pos = refStr.indexOf(':');

    if (pos >= 0) {
      verseStr = refStr.substring(pos + 1);
    }

    if (chunks.length > 1) {
      multiverse = true;
    } else if (chunks[0].endVerse) {
      multiverse = true;
    }

    if (multiverse) {
      results.verseStr = verseStr;
      results.verse = verseStr;
    }
  }

  return results;
}
/**
 * takes a reference and splits into individual verses or verse spans for cleanup.  Then recombines the cleaned up references to a string.
 * @param {string} ref - reference in format such as:
 *   “2:4-5”, “2:3a”, “2-3b-4a”, “2:7,12”, “7:11-8:2”, "6:15-16;7:2"
 * @return {array|string}
 */


function cleanupReference(ref) {
  var chunks = parseReferenceToList(ref);
  var cleanedRef = convertReferenceChunksToString(chunks);
  var results = characterizeReference(chunks, cleanedRef);
  results.cleanedRef = cleanedRef;
  return results;
}
/**
* splits verse list into individual verses
* @param {string} verseStr
* @return {array} - Array of individual verse Integers
*/


function getVerseList(verseStr) {
  var verses = verseStr.toString().split(',');
  return verses;
}
/**
 * test if verse is valid verse span string
 * @param {string|number} verse
 * @return {boolean}
 */


function isVerseSpan(verse) {
  var isSpan = typeof verse === 'string' && verse.includes('-');
  return isSpan;
}
/**
 * test if verse is valid verse list (verse numbers separated by commas)
 * @param {string|number} verse
 * @return {boolean}
 */


function isVerseList(verse) {
  var isList = typeof verse === 'string' && verse.includes(',');
  return isList;
}
/**
 * test if verse is valid verse span or verse list
 * @param {string|number} verse
 * @return {boolean}
 */


function isVerseSet(verse) {
  var isSet = isVerseSpan(verse) || isVerseList(verse);
  return isSet;
}
/**
 * get verse range from span
 * @param {string} verseSpan
 * @return {{high: number, low: number}}
 */


function getVerseSpanRange(verseSpan) {
  var _verseSpan$split = verseSpan.split('-'),
      _verseSpan$split2 = _slicedToArray(_verseSpan$split, 2),
      low = _verseSpan$split2[0],
      high = _verseSpan$split2[1];

  if (low && high) {
    low = parseInt(low, 10);
    high = parseInt(high, 10);

    if (low > 0 && high >= low) {
      return {
        low: low,
        high: high
      };
    }
  }

  return {};
}
/**
 * make sure that chapter and verse are lower than or equal to end chapter and verse
 * @param {int} chapter
 * @param {int} verse
 * @param {int} endChapter
 * @param {int} endVerse
 * @returns {boolean}
 */


function isVerseInRange(chapter, verse, endChapter, endVerse) {
  if (chapter < endChapter) {
    return true;
  }

  if (chapter === endChapter) {
    if (verse <= endVerse) {
      return true;
    }
  }

  return false;
}
/**
 * check if verse range
 * @param ref
 * @returns {{verse}}
 */


function getRange(ref) {
  var refType = _typeof(ref);

  var isNumber = refType === 'number';

  if (!isNumber) {
    var pos = getRangeSeparator(ref);
    var foundRange = pos >= 0;

    if (foundRange) {
      var start = toIntIfValid(ref.substring(0, pos));
      var endStr = ref.substring(pos + 1);

      var _getChapterVerse3 = getChapterVerse(endStr),
          chapter = _getChapterVerse3.chapter,
          verse = _getChapterVerse3.verse,
          foundChapterVerse = _getChapterVerse3.foundChapterVerse;

      if (foundChapterVerse) {
        return {
          verse: start,
          endChapter: chapter,
          endVerse: verse
        };
      } else {
        return {
          verse: start,
          endVerse: toIntIfValid(endStr)
        };
      }
    } else if (ref.toLowerCase().includes('ff')) {
      var followingPos = ref.indexOf('ff');

      var _start = toIntIfValid(ref.substring(0, followingPos));

      return {
        verse: _start,
        endVerse: 'ff'
      };
    }
  }

  return {
    verse: ref
  };
}
/**
 * @private 
 * parse ref to see if chapter:verse
 * @param ref
 * @returns {{chapter: string, foundChapterVerse: boolean, verse: string}}
 */


function getChapterVerse(ref) {
  if (typeof ref !== 'string') {
    return {
      verse: ref
    };
  }

  var pos = (ref || '').indexOf(':');
  var foundChapterVerse = pos >= 0;
  var chapter, verse;

  if (foundChapterVerse) {
    chapter = toIntIfValid(ref.substring(0, pos));
    verse = toIntIfValid(ref.substring(pos + 1));
  } else {
    verse = toIntIfValid(ref);
  }

  return {
    chapter: chapter,
    verse: verse,
    foundChapterVerse: foundChapterVerse
  };
}
/**
 * convert value to int if string, otherwise just return value
 * @param {string|int} value
 * @returns {int}
 */


function toInt(value) {
  return typeof value === 'string' ? parseInt(value, 10) : value;
}
/**
 * return integer of value (string or int) if valid, otherwise just return value
 * @param {string|int} value
 * @returns {int|int}
 */


function toIntIfValid(value) {
  if (typeof value === 'string') {
    var pos = getRangeSeparator(value);

    if (pos >= 0) {
      return value;
    }

    if (value.includes('ff')) {
      return value;
    }

    var intValue = toInt(value);

    if (!isNaN(intValue)) {
      return intValue;
    }
  }

  return value;
}
/**
 * @private 
 * look for possible dash and hyphen character to see if versePart is a verse range
 * @param {string} versePart
 * @return {number} position of dash or hyphen found, or -1 if not found
 */


function getRangeSeparator(versePart) {
  var _iterator3 = _createForOfIteratorHelper(RANGE_SEPARATORS),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var separator = _step3.value;
      var pos = versePart.indexOf(separator);

      if (pos >= 0) {
        return pos;
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return -1;
}
/**
 * @private 
   * check if verse is within a verse range (e.g. 2-4)
 * @param {object} chapterData - indexed by verse ref
 * @param {number} verse - verse to match
 * @param {number} chapter - current chapter
 * @returns {{verseData, verse: number, foundVerseKey, nextVerse}}
 */


function findVerseInVerseRange(chapterData, verse, chapter) {
  var verseKeys = Object.keys(chapterData);
  var foundVerseKey, verseData, verseKey, nextVerse;

  for (var _i2 = 0, _verseKeys = verseKeys; _i2 < _verseKeys.length; _i2++) {
    verseKey = _verseKeys[_i2];

    if (isVerseSpan(verseKey)) {
      var _getVerseSpanRange = getVerseSpanRange(verseKey),
          low = _getVerseSpanRange.low,
          high = _getVerseSpanRange.high;

      if (verse >= low && verse <= high) {
        verseData = chapterData[verseKey];
        foundVerseKey = verse;
        nextVerse = high + 1; // move to verse after range

        break;
      }
    }
  }

  return {
    foundVerseKey: foundVerseKey,
    verse: verseKey,
    verseData: verseData,
    nextVerse: nextVerse
  };
}
/**
 * finds all verses from bookData contained in ref, then returns array of references and verse data
 * @param {object} bookData - indexed by chapter and then verse ref
 * @param {string} ref - formats such as “2:4-5”, “2:3a”, “2-3b-4a”, “2:7,12”, “7:11-8:2”, "6:15-16;7:2"
 * @returns {Object[]} - Array of objects with chapter, verse, verseData values
 */


function getVerses(bookData, ref) {
  var verses = [];
  var chunks = parseReferenceToList(ref);
  var chapterData, verseData;

  var _iterator4 = _createForOfIteratorHelper(chunks),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var chunk = _step4.value;

      if (!chunk.endVerse) {
        var chapter = chunk.chapter;
        chapterData = bookData[chapter];
        var verseKey = chunk.verse;
        verseData = chapterData && chapterData[verseKey];

        if (!verseData && chapterData) {
          // if verse doesn't exist, check for verse spans in chapter data
          var __ret = findVerseInVerseRange(chapterData, verseKey, chapter);

          if (__ret.foundVerseKey) {
            verseKey = __ret.verse;
            verseData = __ret.verseData;
          }
        }

        verses.push({
          chapter: chapter,
          verse: verseKey,
          verseData: verseData
        });
      } else {
        // handle range
        var _chapter = chunk.chapter;
        var verse = chunk.verse;
        var endVerse = chunk.endVerse;
        var endChapter = chunk.endChapter || _chapter;

        while (isVerseInRange(_chapter, verse, endChapter, endVerse)) {
          chapterData = bookData[_chapter];
          verseData = chapterData && chapterData[verse];
          var _verseKey = verse;

          if (!verseData && chapterData) {
            // if verse doesn't exist, check for verse spans in chapter data
            var _ret = findVerseInVerseRange(chapterData, _verseKey, _chapter);

            if (_ret.foundVerseKey) {
              _verseKey = _ret.verse;
              verseData = _ret.verseData;
              verse = _ret.nextVerse - 1; // correct for autoincrement
            }
          }

          if (!verseData) {
            // if past end of chapter, skip to next
            _chapter += 1;
            verse = 1;
            continue;
          }

          verses.push({
            chapter: _chapter,
            verse: _verseKey,
            verseData: verseData
          });
          verse += 1;
        }
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return verses;
}
/**
 * @typedef {Object} verseChunk Object representing a chapter reference or reference range
 * @property {number} verseChunk.chapter
 * @property {number} verseChunk.verse
 * @property {number} verseChunk.endChapter
 * @property {number} verseChunk.endVerse
 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,