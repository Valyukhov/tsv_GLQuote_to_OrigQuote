"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _usfmToJson = require("usfm-js/lib/js/usfmToJson");
var _srrcl = require("../../utils/srrcl");
var _react = require("react");
var _axios = _interopRequireDefault(require("axios"));
var _jsYaml = _interopRequireDefault(require("js-yaml"));
var _selections = require("../../utils/selections");
var _constants = require("../../utils/constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/**
 * нам надо вернуть переводы всех цитат из ноутсов
 * приходит айди книги, номер главы
 * Скорее всего надо будет для одной главы такое отдавать, или диапазон стихов в рамках одной главы, по этому не усложняем пока что
 * приходит массив ноутсов
 * Что если нам принимать в том же формате что и хранится в тн, тогда никому не надо будет что-то там форматировать перед тем как отдать в библиотеку
 * если в том же виде, то мы можем и вернуть в том же виде, просто дописать колонку, к примеру OrigQuote и Quote
 * первый шаг это получить главу на греческом
 * второе - получить главу на целевом языке
 * затем получить все occurrence
 * и после этого проходить по каждому элементу, получать перевод и сохранять
 */

function useQuotesTranslation(_ref) {
  var book = _ref.book,
    _tnotes = _ref.tnotes,
    _ref$usfm = _ref.usfm,
    jsonChapter = _ref$usfm.jsonChapter,
    link = _ref$usfm.link;
  var _useState = (0, _react.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    greekUsfm = _useState2[0],
    setGreekUsfm = _useState2[1];
  var _useState3 = (0, _react.useState)(function () {
      return _tnotes;
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    tnotes = _useState4[0],
    setTnotes = _useState4[1];
  var _useState5 = (0, _react.useState)(0),
    _useState6 = _slicedToArray(_useState5, 2),
    chapter = _useState6[0],
    setChapter = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = _slicedToArray(_useState7, 2),
    targetUsfm = _useState8[0],
    setTargetUsfm = _useState8[1];
  var _useState9 = (0, _react.useState)({}),
    _useState10 = _slicedToArray(_useState9, 2),
    targetUsfmChapter = _useState10[0],
    setTargetUsfmChapter = _useState10[1];
  var _useState11 = (0, _react.useState)({}),
    _useState12 = _slicedToArray(_useState11, 2),
    greekUsfmChapter = _useState12[0],
    setGreekUsfmChapter = _useState12[1];
  var _useState13 = (0, _react.useState)([]),
    _useState14 = _slicedToArray(_useState13, 2),
    extraTNotes = _useState14[0],
    setExtraTNotes = _useState14[1];
  (0, _react.useEffect)(function () {
    if ((tnotes === null || tnotes === void 0 ? void 0 : tnotes.length) > 0) {
      var _tnotes$;
      var ref = (_tnotes$ = tnotes[0]) === null || _tnotes$ === void 0 ? void 0 : _tnotes$.Reference;
      var _ref$split = ref.split(':'),
        _ref$split2 = _slicedToArray(_ref$split, 1),
        _chapter = _ref$split2[0];
      if (_chapter) {
        setChapter(_chapter);
      }
    }
  }, [tnotes]);
  var getManifest = (0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(repoLink) {
      var data, res, manifest;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _axios["default"].get(repoLink + '/manifest.yaml');
          case 3:
            res = _context.sent;
            data = res.data;
            _context.next = 10;
            break;
          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            return _context.abrupt("return", false);
          case 10:
            manifest = _jsYaml["default"].load(data, {
              json: true
            });
            return _context.abrupt("return", manifest);
          case 12:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 7]]);
    }));
    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }(), [link]);
  (0, _react.useEffect)(function () {
    var main = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var _manifest$projects$fi, repoLink, manifest, bookPath, url, _data, _usfm;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(!jsonChapter && link)) {
                _context2.next = 20;
                break;
              }
              repoLink = (0, _selections.formatLink)(link);
              _context2.next = 4;
              return getManifest(repoLink);
            case 4:
              manifest = _context2.sent;
              if (manifest) {
                _context2.next = 7;
                break;
              }
              return _context2.abrupt("return", false);
            case 7:
              bookPath = (_manifest$projects$fi = manifest.projects.find(function (el) {
                return el.identifier === book;
              })) === null || _manifest$projects$fi === void 0 ? void 0 : _manifest$projects$fi.path;
              if (bookPath.slice(0, 2) === './') {
                url = "".concat(repoLink, "/").concat(bookPath.slice(2));
              } else {
                url = "".concat(repoLink, "/").concat(bookPath);
              }
              _context2.prev = 9;
              _context2.next = 12;
              return _axios["default"].get(url);
            case 12:
              _data = _context2.sent;
              _context2.next = 18;
              break;
            case 15:
              _context2.prev = 15;
              _context2.t0 = _context2["catch"](9);
              return _context2.abrupt("return", false);
            case 18:
              _usfm = (0, _usfmToJson.usfmToJSON)(_data.data);
              setTargetUsfm(_usfm);
            case 20:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[9, 15]]);
      }));
      return function main() {
        return _ref3.apply(this, arguments);
      };
    }();
    main();
  }, [link, book, !!jsonChapter]);
  (0, _react.useEffect)(function () {
    var main = /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var _manifest$projects$fi2, _usfm$chapters$chapte, _usfm$chapters, repoLink, manifest, bookPath, url, _data, _usfm;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!jsonChapter) {
                _context3.next = 4;
                break;
              }
              setTargetUsfmChapter(jsonChapter);
              _context3.next = 25;
              break;
            case 4:
              if (!(link && chapter)) {
                _context3.next = 25;
                break;
              }
              repoLink = (0, _selections.formatLink)(link);
              _context3.next = 8;
              return getManifest(repoLink);
            case 8:
              manifest = _context3.sent;
              if (manifest) {
                _context3.next = 11;
                break;
              }
              return _context3.abrupt("return", false);
            case 11:
              bookPath = (_manifest$projects$fi2 = manifest.projects.find(function (el) {
                return el.identifier === book;
              })) === null || _manifest$projects$fi2 === void 0 ? void 0 : _manifest$projects$fi2.path;
              if (bookPath.slice(0, 2) === './') {
                url = "".concat(repoLink, "/").concat(bookPath.slice(2));
              } else {
                url = "".concat(repoLink, "/").concat(bookPath);
              }
              _context3.prev = 13;
              _context3.next = 16;
              return _axios["default"].get(url);
            case 16:
              _data = _context3.sent;
              _context3.next = 22;
              break;
            case 19:
              _context3.prev = 19;
              _context3.t0 = _context3["catch"](13);
              return _context3.abrupt("return", false);
            case 22:
              _usfm = (0, _usfmToJson.usfmToJSON)(_data.data);
              setTargetUsfm(_usfm);
              setTargetUsfmChapter((_usfm$chapters$chapte = _usfm === null || _usfm === void 0 ? void 0 : (_usfm$chapters = _usfm.chapters) === null || _usfm$chapters === void 0 ? void 0 : _usfm$chapters[chapter]) !== null && _usfm$chapters$chapte !== void 0 ? _usfm$chapters$chapte : []);
            case 25:
            case "end":
              return _context3.stop();
          }
        }, _callee3, null, [[13, 19]]);
      }));
      return function main() {
        return _ref4.apply(this, arguments);
      };
    }();
    main();
  }, [link, chapter, book, !!jsonChapter]);

  // кешируем юсфм
  (0, _react.useEffect)(function () {
    var main = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var file;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!book) {
                _context4.next = 11;
                break;
              }
              _context4.prev = 1;
              _context4.next = 4;
              return _axios["default"].get('https://git.door43.org/' + _constants.bookUrl[book]);
            case 4:
              file = _context4.sent;
              _context4.next = 10;
              break;
            case 7:
              _context4.prev = 7;
              _context4.t0 = _context4["catch"](1);
              return _context4.abrupt("return", false);
            case 10:
              setGreekUsfm((0, _usfmToJson.usfmToJSON)(file.data));
            case 11:
            case "end":
              return _context4.stop();
          }
        }, _callee4, null, [[1, 7]]);
      }));
      return function main() {
        return _ref5.apply(this, arguments);
      };
    }();
    main();
  }, [book]);

  // кешируем главу (это не обязательно)
  (0, _react.useEffect)(function () {
    if (greekUsfm && chapter) {
      var _greekUsfm$chapters$c, _greekUsfm$chapters;
      setGreekUsfmChapter((_greekUsfm$chapters$c = greekUsfm === null || greekUsfm === void 0 ? void 0 : (_greekUsfm$chapters = greekUsfm.chapters) === null || _greekUsfm$chapters === void 0 ? void 0 : _greekUsfm$chapters[chapter]) !== null && _greekUsfm$chapters$c !== void 0 ? _greekUsfm$chapters$c : []);
    }
  }, [greekUsfm, chapter]);
  (0, _react.useEffect)(function () {
    if (Object.keys(greekUsfmChapter).length && Object.keys(targetUsfmChapter).length) {
      var _extraTNotes = tnotes.map(function (_tnote) {
        var tnote = _objectSpread({}, _tnote);
        var greekVerseObjects, targetVerseObjects;
        if (tnote.verse.length === 1) {
          var _greekUsfmChapter$par, _targetUsfmChapter$pa;
          greekVerseObjects = greekUsfmChapter === null || greekUsfmChapter === void 0 ? void 0 : (_greekUsfmChapter$par = greekUsfmChapter[parseInt(tnote.verse[0])]) === null || _greekUsfmChapter$par === void 0 ? void 0 : _greekUsfmChapter$par.verseObjects;
          targetVerseObjects = [targetUsfmChapter === null || targetUsfmChapter === void 0 ? void 0 : (_targetUsfmChapter$pa = targetUsfmChapter[parseInt(tnote.verse[0])]) === null || _targetUsfmChapter$pa === void 0 ? void 0 : _targetUsfmChapter$pa.verseObjects];
        } else {
          greekVerseObjects = tnote.verse.map(function (verse) {
            var _greekUsfmChapter$ver;
            return greekUsfmChapter === null || greekUsfmChapter === void 0 ? void 0 : (_greekUsfmChapter$ver = greekUsfmChapter[verse]) === null || _greekUsfmChapter$ver === void 0 ? void 0 : _greekUsfmChapter$ver.verseObjects;
          });
          targetVerseObjects = tnote.verse.map(function (verse) {
            var _targetUsfmChapter$ve;
            return targetUsfmChapter === null || targetUsfmChapter === void 0 ? void 0 : (_targetUsfmChapter$ve = targetUsfmChapter[verse]) === null || _targetUsfmChapter$ve === void 0 ? void 0 : _targetUsfmChapter$ve.verseObjects;
          });
        }
        var selections = (0, _srrcl.selectionsFromQuoteAndVerseObjects)({
          quote: tnote.Quote,
          verseObjects: greekVerseObjects,
          occurrence: tnote.Occurrence,
          chapter: tnote.chapter,
          verses: tnote.verse
        });
        var result = tnote.verse.map(function (verse, index) {
          return targetVerseObjects[index].map(function (vo) {
            return (0, _selections.parseVerseObjects)(vo, selections, {
              chapter: tnote.chapter,
              verse: verse
            });
          });
        }).reduce(function (acc, cur) {
          return [].concat(_toConsumableArray(acc), _toConsumableArray(cur));
        }, []);
        tnote.origQuote = tnote.Quote;
        tnote.Quote = (0, _selections.formatToString)(result);
        return tnote;
      });
      setExtraTNotes(_extraTNotes);
    }
  }, [greekUsfmChapter, targetUsfmChapter, tnotes]);
  return {
    extraTNotes: extraTNotes,
    setTnotes: setTnotes
  };
}
var _default = useQuotesTranslation;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,