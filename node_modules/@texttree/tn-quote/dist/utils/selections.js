"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areSelected = void 0;
exports.formatLink = formatLink;
exports.tsvToJSON = exports.selectionFromWord = exports.parseVerseObjects = exports.formatToString = void 0;
var _srrcl = require("./srrcl");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/**
 * Метод для того чтобы получить правильную ссылку
 * @param {string} link абсолютная или относительная ссылка на репозиторий или ветку или коммит
 *
 * @example
 * formatLink('https://git.door43.org/unfoldingWord/en_ult/');
 * // returns https://git.door43.org/unfoldingWord/en_ult/src/branch/master
 * formatLink('unfoldingWord/en_ult');
 * // returns https://git.door43.org/unfoldingWord/en_ult/src/branch/master
 * formatLink('unfoldingWord/en_ult/src/commit/ac345f982fcab3/');
 * // returns https://git.door43.org/unfoldingWord/en_ult/src/commit/ac345f982fcab3
 *
 * @returns {string}
 */
function formatLink(link) {
  var url;
  try {
    url = new URL(link, 'https://git.door43.org/');
  } catch (error) {
    return 'https://git.door43.org/unfoldingWord/en_ult/src/branch/master';
  }
  url.host = 'git.door43.org';
  var path = url.pathname;
  path = path.slice(1);
  if (path[path.length - 1] === '/') {
    path = path.slice(0, -1);
  }
  var pathEl = path.split('/');
  if (pathEl.length === 2) {
    pathEl.push('raw', 'branch', 'master');
  }
  if (pathEl[2] === 'src') {
    pathEl[2] = 'raw';
  }
  url.pathname = '/' + pathEl.join('/');
  return url.href;
}

/**
 *
 * @param {string} tsv tsv file content
 * @param {[string]} headers array of columns
 * @param {boolean} splitReference whether it is necessary to break the `Reference` into a `chapter` and a `verse`
 * @returns {[array]}
 */
var tsvToJSON = function tsvToJSON(tsv, headers) {
  var splitReference = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  tsv = tsv.split('\n');
  var currentHeaders = tsv[0].split('\t');
  tsv = tsv.slice(1);
  var notes = [];
  for (var i = 0; i < tsv.length; i++) {
    var el = tsv[i];
    var line = el.split('\t');
    if (line.length !== currentHeaders.length) {
      continue;
    }
    var note = {};
    for (var index = 0; index < currentHeaders.length; index++) {
      if (headers.includes(currentHeaders[index])) {
        note[currentHeaders[index]] = line[index];
        if (splitReference && currentHeaders[index].toLowerCase() === 'reference') {
          var _line$index$split = line[index].split(':'),
            _line$index$split2 = _slicedToArray(_line$index$split, 2),
            chapter = _line$index$split2[0],
            verse = _line$index$split2[1];
          if (chapter && verse) {
            note.chapter = chapter;
            if (verse.indexOf('-') > 0) {
              note.verse = [];
              var _verse$split = verse.split('-'),
                _verse$split2 = _slicedToArray(_verse$split, 2),
                min = _verse$split2[0],
                max = _verse$split2[1];
              for (var r = parseInt(min); r <= parseInt(max); r++) {
                note.verse.push(r);
              }
            } else {
              note.verse = [verse];
            }
          }
        }
      }
    }
    notes.push(note);
  }
  return notes;
};
exports.tsvToJSON = tsvToJSON;
var formatToString = function formatToString(res) {
  /**
   * надо пройти в цикле по тому что получилось
   * 1. Пропускаем все, пока не попадется первое слово
   * 2. Теперь к слову можно добавлять следующие не пустые строки
   * 3. Если попадается пустая строка, то пропускаем до следующего слова
   * 4. Если есть то ставим три точки и повторяем со 2 пункта
   * 5. Если больше нет слов, то надо все символы убрать, по этому не стоит их прибавлять сразу, собирать лучше
   * Либо такой вариант
   * 1. Пропускем все, пока не попадется элемент, у которого первый символ - спецсимвол
   * 2. Прибавляем к нему все, пока не попадется пустая строка.
   * 3. С этого момента мы запоминаем и проверяем дальше слова.
   * 4. Если больше ничего нет то удаляем все символы, пробелы и т.д., что мы могли добавить
   * 5. Если попалось новое слово, то ставим три точки и добавляем снова все что идет
   */
  var resultString = ''; // это итоговая строка с текстом
  var addon = ''; // тут мы будем собирать все что после слова остается
  // проходим в цикле по каждому слову
  var dotted = false;
  var _iterator = _createForOfIteratorHelper(res),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var word = _step.value;
      if (!resultString.length) {
        // если еще нет никаких слов
        if (word[0] === '~') {
          // если это наше слово то добавим его
          resultString = word.slice(1);
        } // если нет то идем дальше
      } else {
        if (word === '') {
          // если это пустое значение, значит при появлении нового слова надо будет поставить три точки
          dotted = true;
          continue;
        }
        if (word[0] === '~') {
          // если это наше слово то
          if (dotted) {
            // если между словами были какие-то другие слова - поставим три точки
            dotted = false;
            addon = '';
            resultString += '... ' + word.slice(1);
          } else {
            // если небыло между словами других слов
            resultString += addon + word.slice(1);
            addon = '';
          }
          continue;
        }
        if (/\w/gi.test(word)) {
          // если это какие-то непривязанные слова то будем ставить три точки
          dotted = true;
        } else {
          // значит тут пробелы, запятые и другие символы
          addon += word;
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return resultString;
};
exports.formatToString = formatToString;
var parseVerseObjects = function parseVerseObjects(verseObject, selections, reference) {
  switch (verseObject.type) {
    case 'quote':
      if (verseObject.children) {
        return verseObject.children.map(function (el) {
          return parseVerseObjects(el, selections, reference);
        });
      }
      break;
    case 'milestone':
      switch (verseObject.tag) {
        case 'k':
          return verseObject.children.map(function (el) {
            return parseVerseObjects(el, selections, reference);
          });
        case 'zaln':
          if (verseObject.children.length === 1 && verseObject.children[0].type === 'milestone') {
            return parseVerseObjects(verseObject.children[0], selections, reference);
          } else {
            if (verseObject.strong) {
              var selected = areSelected({
                words: [verseObject],
                selections: selections,
                reference: reference
              });
              return selected ? '~' + verseObject.children.map(function (_verseObject) {
                return _verseObject.text || _verseObject.content;
              }).join('') : '';
            }
            break;
          }
      }
      break;
    case 'text':
      return verseObject.text;
    case 'word':
      if (verseObject.strong) {
        var _selected = areSelected({
          words: [verseObject],
          selections: selections,
          reference: reference
        });
        return _selected ? '~' + (verseObject.text || verseObject.content) : '';
      }
      break;
  }
  return '';
};
exports.parseVerseObjects = parseVerseObjects;
var areSelected = function areSelected(_ref) {
  var words = _ref.words,
    selections = _ref.selections,
    _ref$reference = _ref.reference,
    reference = _ref$reference === void 0 ? {
      chapter: 100,
      verse: 100
    } : _ref$reference;
  var selected = false;
  var _selections = words.map(function (word) {
    return selectionFromWord(word);
  });
  _selections.forEach(function (selection) {
    var _selection = JSON.parse(selection);
    var _text = (0, _srrcl.normalizeString)(_selection.text);
    var _occ = _selection.occurrence;
    var _occs = _selection.occurrences;
    var _reference$chapter = reference.chapter,
      _ch = _reference$chapter === void 0 ? 100 : _reference$chapter,
      _reference$verse = reference.verse,
      _v = _reference$verse === void 0 ? 100 : _reference$verse;
    for (var i = 0; i < selections.length; i++) {
      var text = selections[i].text; //already normalized.
      var occ = selections[i].occurrence;
      var occs = selections[i].occurrences;
      var _selections$i$referen = selections[i].reference,
        _selections$i$referen2 = _selections$i$referen.chapter,
        ch = _selections$i$referen2 === void 0 ? 100 : _selections$i$referen2,
        _selections$i$referen3 = _selections$i$referen.verse,
        v = _selections$i$referen3 === void 0 ? 100 : _selections$i$referen3;
      if (text === _text && occ === _occ && occs === _occs && parseInt(ch) === parseInt(_ch) && parseInt(v) === parseInt(_v)) {
        selected = true;
        break;
      }
    }
  });
  return selected;
};
exports.areSelected = areSelected;
var selectionFromWord = function selectionFromWord(word) {
  var content = word.content,
    text = word.text,
    occurrence = word.occurrence,
    occurrences = word.occurrences;
  var selectionObject = {
    text: content || text,
    occurrence: parseInt(occurrence),
    occurrences: parseInt(occurrences)
  };
  var selection = JSON.stringify(selectionObject);
  return selection;
};
exports.selectionFromWord = selectionFromWord;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,