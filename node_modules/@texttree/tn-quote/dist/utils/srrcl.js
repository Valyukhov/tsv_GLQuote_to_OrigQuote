"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verseObjectsToString = exports.subSelectionsFromSubquote = exports.selectionsFromQuoteAndVerseObjects = exports.selectionsFromQuoteAndString = exports.referenceIdsFromBcvQuery = exports.normalizeString = exports.getRegexForWord = exports.getPrecedingText = exports.getPrecedingOccurrences = exports.getCurrentOccurrenceFromPrecedingText = exports.generateSelection = exports.flattenVerseObjects = void 0;
var _stringPunctuationTokenizer = require("string-punctuation-tokenizer");
var _xregexp = _interopRequireDefault(require("xregexp"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * The function will find the quote in the verse object
 * @param {string} quote - The orignal quote to find
 * @param {object} verseObjects - verse ojects to search
 * @param {number} occurrence - The occurrence to match
 * @returns {[]} - The quotes we found
 */
var selectionsFromQuoteAndVerseObjects = function selectionsFromQuoteAndVerseObjects(_ref) {
  var verseObjects = _ref.verseObjects,
    quote = _ref.quote,
    occurrence = _ref.occurrence,
    _ref$chapter = _ref.chapter,
    chapter = _ref$chapter === void 0 ? 100 : _ref$chapter,
    _ref$verses = _ref.verses,
    verses = _ref$verses === void 0 ? [100] : _ref$verses;
  if (occurrence === undefined || occurrence === 0) {
    return [];
  }
  var selections = [];
  if (quote && verseObjects.length > 0 && verses.length > 0) {
    if (verses.length > 1) {
      var _verseObjects = verseObjects.reduce(function (prev, curr) {
        return [].concat(_toConsumableArray(prev), _toConsumableArray(curr));
      }, []);
      var string = verseObjectsToString(_verseObjects);
      selections = selectionsFromQuoteAndString({
        quote: quote,
        string: string,
        occurrence: occurrence
      });
      var newSelections = [];
      for (var id = 0; id < selections.length; id++) {
        var sel = _objectSpread({}, selections[id]);
        for (var index = 0; index < verseObjects.length; index++) {
          var tmpSelections = selectionsFromQuoteAndVerseObjects({
            quote: sel.text,
            verseObjects: verseObjects[index],
            occurrence: -1,
            reference: {
              chapter: chapter,
              verse: verses[index]
            }
          });
          if (tmpSelections.length === 0) {
            continue;
          }
          if (sel.occurrence > tmpSelections[0].occurrences) {
            sel.occurrence -= tmpSelections[0].occurrences;
          } else {
            newSelections.push({
              text: sel.text,
              occurrence: sel.occurrence,
              reference: {
                chapter: parseInt(chapter),
                verse: parseInt(verses[index])
              },
              occurrences: tmpSelections[0].occurrences
            });
            break;
          }
        }
      }
      selections = [].concat(newSelections);
    } else {
      var _string = verseObjectsToString(verseObjects);
      selections = selectionsFromQuoteAndString({
        quote: quote,
        string: _string,
        occurrence: occurrence
      }).map(function (el) {
        return _objectSpread(_objectSpread({}, el), {}, {
          reference: {
            chapter: parseInt(chapter),
            verse: parseInt(verses[0])
          }
        });
      });
    }
  }
  return selections.map(function (el) {
    return el.occurrences === 0 ? 0 : el.occurrence > el.occurrences ? 0 : el.occurrences;
  }).includes(0) ? [] : selections;
};
exports.selectionsFromQuoteAndVerseObjects = selectionsFromQuoteAndVerseObjects;
var referenceIdsFromBcvQuery = function referenceIdsFromBcvQuery(bcvQuery) {
  var resArray = [];
  if (bcvQuery !== null && bcvQuery !== void 0 && bcvQuery.book) {
    Object.entries(bcvQuery === null || bcvQuery === void 0 ? void 0 : bcvQuery.book).forEach(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
        bookKey = _ref3[0],
        ch = _ref3[1].ch;
      Object.entries(ch).forEach(function (_ref4) {
        var _ref5 = _slicedToArray(_ref4, 2),
          chNum = _ref5[0],
          v = _ref5[1].v;
        Object.entries(v).forEach(function (_ref6) {
          var _ref7 = _slicedToArray(_ref6, 1),
            vNum = _ref7[0];
          resArray.push("".concat(chNum, ":").concat(vNum));
        });
      });
    });
  }
  return resArray;
};

/**
 * @description flatten verse objects from nested format to flat array
 * @param {array} verseObjects - source array of nested verseObjects
 * @param {array} flat - output array that will be filled with flattened verseObjects
 */
exports.referenceIdsFromBcvQuery = referenceIdsFromBcvQuery;
var flattenVerseObjects = function flattenVerseObjects(verseObjects) {
  var flat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var _verseObjects = _toConsumableArray(verseObjects);
  while (_verseObjects.length > 0) {
    var object = _verseObjects.shift();
    if (object) {
      if (object.type === 'milestone') {
        // get children of milestone
        var _flat = flattenVerseObjects(object.children);
        _flat.forEach(function (_object) {
          return flat.push(_object);
        });
      } else {
        flat.push(object);
      }
    }
  }
  return flat;
};
exports.flattenVerseObjects = flattenVerseObjects;
var verseObjectsToString = function verseObjectsToString(verseObjects) {
  var flattenedVerseObjects = flattenVerseObjects(verseObjects);
  var string = flattenedVerseObjects.map(function (verseObject) {
    return verseObject.text;
  }).join(' ');
  return string;
};

/**
 * The function will find the quote inside the string
 * @param {string} quote - The orignal quote to find
 * @param {string} string - orignal text to search
 * @param {number} occurrence - The occurrence to match
 * @returns {[]} - The quotes we found
 */
exports.verseObjectsToString = verseObjectsToString;
var selectionsFromQuoteAndString = function selectionsFromQuoteAndString(_ref8) {
  var quote = _ref8.quote,
    rawString = _ref8.string,
    occurrence = _ref8.occurrence;
  var string = normalizeString(rawString);
  // Calculate hasAmpersand before normalizing quote.
  var _subquotes = quote.replace(/( ?… ?)+/g, ' & '); //replace elipse with '&'
  var subquotes = _subquotes.split('&').map(normalizeString); // разбиваем по амперсанду строку на подстроки
  var selections = []; // массив со словами которые надо подсветить
  var hasAmpersand = subquotes.length > 1; // есть ли амперсанд

  if (hasAmpersand && occurrence === -1) {
    // с амперсандом нельзя подсвечивать все возможные варианты (непонятно почему так, вроде же можно сделать (хотя теперь понятно, ниже идет подсчет, вхождений, если будет амперсанд, то будет сложнее регулярку написать)), нужен какой-то конкретный
    return [];
  }
  if (occurrence === -1) {
    // если нужны все вхождения то
    // считаем количество вхождений в стихе и делаем так, типа они написаны через амперсанд, подстроки
    quote = normalizeString(quote); // чистим цитату от лишнего
    var occurrences = getPrecedingOccurrences(string, quote);
    subquotes = new Array(occurrences).fill(quote);
  }
  var precedingText = ''; // это текст который до слова, нужен только для амперсанда или -1
  var precedingOccurrences = 0; // это вроде количество предыдущих вхождений
  subquotes.forEach(function (subquote, index) {
    // этот код по большей части для нескольких слов через амперсанд
    // надо проверить, как он работает для одного слова и -1, слово и 2, несколько слов через &
    precedingOccurrences = getPrecedingOccurrences(precedingText, subquote); // считаем сколько раз слово встречалось в предыдущем тексте (работает только для &)
    // без амперсанда у нас будет 0
    var currentOccurrence = getCurrentOccurrenceFromPrecedingText(occurrence, index, precedingOccurrences); // количество, которое нам надо дальше, надо понять как его считать и почему у меня пишет 4 из трех
    precedingText = getPrecedingText(string, subquote, currentOccurrence, precedingOccurrences); // тут мы получаем текст, который до искомого слова шел
    var subSelections = subSelectionsFromSubquote({
      subquote: subquote,
      precedingText: precedingText,
      string: string
    });
    subSelections.forEach(function (subSelection) {
      return selections.push(subSelection);
    });
    /** Adding the previous subquote to account for repeated ampersand words i.e. Θεοῦ&Θεοῦ */
    precedingText += subquote; // добавляем искомое слово к тексту который был до слова
  });

  return selections;
};
exports.selectionsFromQuoteAndString = selectionsFromQuoteAndString;
var normalizeString = function normalizeString(string) {
  var normalized = tokenizer(string).join(' ');
  return normalized;
};
exports.normalizeString = normalizeString;
var tokenizer = function tokenizer(text) {
  return (0, _stringPunctuationTokenizer.tokenize)({
    text: text,
    greedy: true,
    normalize: true
  });
};

/**
 * This counts the number of subquotes in the string
 * @param {string} string - string we are searching in
 * @param {string} subquote - string we are searching for
 * @returns {number} number
 */
var getPrecedingOccurrences = function getPrecedingOccurrences(string, subquote) {
  if (!string || !subquote) {
    return 0;
  }
  var regex = getRegexForWord(subquote);
  var matches = _xregexp["default"].match(string, regex, 'all');
  var count = matches && matches.length || 0;
  return count;
};

/**
 * This function gets the correct amount of occurrences to provide the function getPrecedingText
 *
 * @param {number} occurrence - The occurrence of the subquote in the string
 * @param {number} index - The current index of the subquotes
 * @param {number} precedingOccurrences - The number of occurrences before the current subquote in the string
 */
exports.getPrecedingOccurrences = getPrecedingOccurrences;
var getCurrentOccurrenceFromPrecedingText = function getCurrentOccurrenceFromPrecedingText(occurrence, index, precedingOccurrences) {
  if (occurrence === -1 || index === 0) {
    return occurrence;
  } else {
    return precedingOccurrences + 1;
  }
};

/**
 *
 * @param {string} string - The entire string to use to find the preceding text
 * @param {string} subquote - The subquote to find the preceding text of
 * @param {number} occurrence - The occurrence of the string in the entire string
 * @param {number} index - The index of the subquote
 */
exports.getCurrentOccurrenceFromPrecedingText = getCurrentOccurrenceFromPrecedingText;
var getPrecedingText = function getPrecedingText(string, subquote, occurrence) {
  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var regex = getRegexForWord(subquote);
  var splitString = _xregexp["default"].split(string, regex);
  if (occurrence === -1) {
    // вот еще один момент, возможно, из за которого неполучится использовать амперсанд и -1
    //Need every occurrence of the subquote
    //Using the index instead of the occurrence
    return splitString.slice(0, index + 1).join(subquote);
  } else {
    //Return the subquote at the specified occurrence
    //of the entire string
    return splitString.slice(0, occurrence).join(subquote);
  }
};
exports.getPrecedingText = getPrecedingText;
var subSelectionsFromSubquote = function subSelectionsFromSubquote(_ref9) {
  var subquote = _ref9.subquote,
    _precedingText = _ref9.precedingText,
    string = _ref9.string;
  //Splitting by tokenization here causes issues because we are still
  //comparing those characters at this level
  var selectedTokens = subquote.split(' '); // разбиваем искомую строку по словам
  var subSelections = [];
  selectedTokens.forEach(function (_selectedText) {
    // для каждого слова
    //Adding the preceding text from the subSelections to ensure that
    //Repeated words are accounted for
    var precedingTextInSubselections = subSelections.map(function (_ref10) {
      var text = _ref10.text;
      return text;
    }).join(' ');
    var subSelection = generateSelection({
      selectedText: _selectedText,
      precedingText: _precedingText + precedingTextInSubselections,
      entireText: string
    });
    subSelections.push(subSelection);
  });
  return subSelections;
};

/**
 * This function takes a search string and create a regex search string to match a whole word
 * @param {string} string - string to search for
 * @returns {RegExp} regex expression
 */
exports.subSelectionsFromSubquote = subSelectionsFromSubquote;
var getRegexForWord = function getRegexForWord(string) {
  var START_WORD_REGEX = '(?<=[\\s,.:;“"\'‘({]|^)';
  var END_WORD_REGEX = '(?=[\\s,.:;“"\'‘!?)}]|$)';
  var search = "".concat(START_WORD_REGEX).concat(string).concat(END_WORD_REGEX);
  var regex = (0, _xregexp["default"])(search, 'u');
  return regex;
};

/**
 * @description - generates a selection object from the selected text, precedingText and whole text
 * @param {String} selectedText - the text that is selected
 * @param {String} precedingText - the text that prescedes the selection
 * @param {String} entireText - the text that the selection should be in
 * @return {Object} - the selection object to be used
 */
exports.getRegexForWord = getRegexForWord;
var generateSelection = function generateSelection(_ref11) {
  var selectedText = _ref11.selectedText,
    precedingText = _ref11.precedingText,
    entireText = _ref11.entireText;
  // replace more than one contiguous space with a single one since HTML/selection only renders 1
  var _entireText = normalizeString(entireText);
  // Getting the occurrences before the current token
  var precedingTokens = tokenizer(precedingText);
  var precedingOccurrencesInPreviousString = precedingTokens.reduce(function (n, val) {
    return n + (val === selectedText);
  }, 0);
  // calculate this occurrence number by adding it to the preceding ones
  var occurrence = precedingOccurrencesInPreviousString + 1;
  // get the total occurrences from the verse
  var allTokens = tokenizer(_entireText);
  var allOccurrences = allTokens.reduce(function (n, val) {
    return n + (val === selectedText);
  }, 0);
  return {
    text: selectedText,
    occurrence: occurrence,
    occurrences: allOccurrences
  };
};
exports.generateSelection = generateSelection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,