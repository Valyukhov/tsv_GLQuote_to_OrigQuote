"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.classifyTokens = exports.tokenize = exports.tokenizeOrigLang = exports.number_ = exports.greedyNumber = exports.number = exports.whitespace = exports.punctuation = exports.origGreedyWord = exports.greedyWord = exports.origWord = exports.word = exports._greedyNumber = exports._origGreedyWord = exports._greedyWord = exports._origWordOrNumber = exports._wordOrNumber = exports._number = exports._origWord = exports._word = void 0;

var _xregexp = _interopRequireDefault(require("xregexp"));

var _occurrences2 = require("./occurrences");

var _normalizers = require("./normalizers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// constants
var _word = "[\\pL\\pM\\u200D\\u2060]+"; // TRICKY: original languages do not use single quotes so u2019 is considered part of a word

exports._word = _word;
var _origWord = "[\\pL\\pM\\u200D\\u2060\\u2019]+";
exports._origWord = _origWord;
var _number = '[\\pN\\pNd\\pNl\\pNo]+';
exports._number = _number;

var _wordOrNumber = '(' + _word + '|' + _number + ')';

exports._wordOrNumber = _wordOrNumber;

var _origWordOrNumber = '(' + _origWord + '|' + _number + ')';

exports._origWordOrNumber = _origWordOrNumber;

var _greedyWord = '(' + _wordOrNumber + '([-\'’]' + _word + ')+|' + _word + '’?)';

exports._greedyWord = _greedyWord;

var _origGreedyWord = '(' + _origWordOrNumber + '([-\'’]' + _origWord + ')+|' + _origWord + '’?)';

exports._origGreedyWord = _origGreedyWord;

var _greedyNumber = '(' + _number + '([:.,]?' + _number + ')+|' + _number + ')';

exports._greedyNumber = _greedyNumber;
var word = (0, _xregexp["default"])(_word, '');
exports.word = word;
var origWord = (0, _xregexp["default"])(_origWord, '');
exports.origWord = origWord;
var greedyWord = (0, _xregexp["default"])(_greedyWord, '');
exports.greedyWord = greedyWord;
var origGreedyWord = (0, _xregexp["default"])(_origGreedyWord, '');
exports.origGreedyWord = origGreedyWord;
var punctuation = (0, _xregexp["default"])('(^\\p{P}|[<>]{2})', '');
exports.punctuation = punctuation;
var whitespace = /\s+/;
exports.whitespace = whitespace;
var number = (0, _xregexp["default"])(_number);
exports.number = number;
var greedyNumber = (0, _xregexp["default"])(_greedyNumber); //  /(\d+([:.,]?\d)+|\d+)/;

exports.greedyNumber = greedyNumber;
var number_ = (0, _xregexp["default"])(number);
exports.number_ = number_;

var tokenizeOrigLang = function tokenizeOrigLang(params) {
  return tokenize(_objectSpread({
    parsers: {
      word: origWord,
      greedyWord: origGreedyWord,
      whitespace: whitespace,
      punctuation: punctuation,
      number: number
    }
  }, params));
};
/**
 * Tokenize a string into an array of words
 * @param {Object} params - string to be tokenized
 * @return {Array} - array of tokenized words/strings
 */


exports.tokenizeOrigLang = tokenizeOrigLang;

var tokenize = function tokenize(_ref) {
  var _ref$text = _ref.text,
      text = _ref$text === void 0 ? '' : _ref$text,
      _ref$includeWords = _ref.includeWords,
      includeWords = _ref$includeWords === void 0 ? true : _ref$includeWords,
      _ref$includeNumbers = _ref.includeNumbers,
      includeNumbers = _ref$includeNumbers === void 0 ? true : _ref$includeNumbers,
      _ref$includePunctuati = _ref.includePunctuation,
      includePunctuation = _ref$includePunctuati === void 0 ? false : _ref$includePunctuati,
      _ref$includeWhitespac = _ref.includeWhitespace,
      includeWhitespace = _ref$includeWhitespac === void 0 ? false : _ref$includeWhitespac,
      _ref$includeUnknown = _ref.includeUnknown,
      includeUnknown = _ref$includeUnknown === void 0 ? false : _ref$includeUnknown,
      _ref$greedy = _ref.greedy,
      greedy = _ref$greedy === void 0 ? false : _ref$greedy,
      _ref$verbose = _ref.verbose,
      verbose = _ref$verbose === void 0 ? false : _ref$verbose,
      _ref$occurrences = _ref.occurrences,
      occurrences = _ref$occurrences === void 0 ? false : _ref$occurrences,
      _ref$parsers = _ref.parsers,
      parsers = _ref$parsers === void 0 ? {
    word: word,
    greedyWord: greedyWord,
    whitespace: whitespace,
    punctuation: punctuation,
    number: number
  } : _ref$parsers,
      _ref$normalize = _ref.normalize,
      normalize = _ref$normalize === void 0 ? false : _ref$normalize,
      _ref$normalizations = _ref.normalizations,
      normalizations = _ref$normalizations === void 0 ? null : _ref$normalizations;
  var string = text.slice(0);
  if (normalize) string = (0, _normalizers.normalizer)(string);

  if (normalize && normalizations) {
    string = (0, _normalizers.normalizerDestructive)(string, normalizations);
  }

  var greedyParsers = _objectSpread({}, parsers, {
    word: parsers.greedyWord,
    number: greedyNumber
  });

  var _parsers = greedy ? greedyParsers : parsers;

  delete _parsers.greedyWord;
  var tokens = classifyTokens(string, _parsers, 'unknown');
  var types = [];
  if (includeWords) types.push('word');
  if (includeNumbers) types.push('number');
  if (includeWhitespace) types.push('whitespace');
  if (includePunctuation) types.push('punctuation');
  if (includeUnknown) types.push('unknown');
  tokens = tokens.filter(function (token) {
    return types.includes(token.type);
  });

  if (occurrences) {
    tokens = tokens.map(function (token, index) {
      var _occurrences = (0, _occurrences2.occurrencesInTokens)(tokens, token.token);

      var _occurrence = (0, _occurrences2.occurrenceInTokens)(tokens, index, token.token);

      return _objectSpread({}, token, {
        occurrence: _occurrence,
        occurrences: _occurrences
      });
    });
  }

  if (verbose) {
    tokens = tokens.map(function (token) {
      delete token.matches;
      return token;
    });
  } else {
    tokens = tokens.map(function (token) {
      return token.token;
    });
  }

  return tokens;
};
/**
 * Tiny tokenizer - https://gist.github.com/borgar/451393
 * @param {String} string - string to be tokenized
 * @param {Object} parsers - { word:/\w+/, whitespace:/\s+/, punctuation:/[^\w\s]/ }
 * @param {String} deftok - type to label tokens that are not classified with the above parsers
 * @return {Array} - array of objects => [{ token:"this", type:"word" },{ token:" ", type:"whitespace" }, Object { token:"is", type:"word" }, ... ]
**/


exports.tokenize = tokenize;

var classifyTokens = function classifyTokens(string, parsers, deftok) {
  string = !string ? '' : string; // if string is undefined, make it an empty string

  if (typeof string !== 'string') {
    throw new Error("tokenizer.tokenize() string is not String: ".concat(string));
  }

  var m;
  var r;
  var t;
  var tokens = [];

  while (string) {
    t = null;
    m = string.length;
    var key = void 0;

    for (key in parsers) {
      if (Object.prototype.hasOwnProperty.call(parsers, key)) {
        r = parsers[key].exec(string); // try to choose the best match if there are several
        // where "best" is the closest to the current starting point

        if (r && r.index < m) {
          var token = r[0];
          t = {
            token: token,
            type: key,
            matches: r.slice(1)
          };
          m = r.index;
        }
      }
    }

    if (m) {
      // there is text between last token and currently
      // matched token - push that out as default or "unknown"
      tokens.push({
        token: string.substr(0, m),
        type: deftok || 'unknown'
      });
    }

    if (t) {
      // push current token onto sequence
      tokens.push(t);
    }

    string = string.substr(m + (t ? t.token.length : 0));
  }

  return tokens;
};

exports.classifyTokens = classifyTokens;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,